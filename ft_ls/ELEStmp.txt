LS
##########

----------------------------------------------------------------------------------------------------------------------------
############################################################################################################################
----------------------------------------------------------------------------------------------------------------------------

A FAIRE
=======

LS note maison
##############
-g3 -fsanitize=address pour debug

./ft_ls -tl
basic sort




RESTE A FAIRE :

-t qui trie pas (et encore moins si y a pas de dossier)
- Le -R marche pas sur le /dev
	+ l'affichage qui marche avec -l mais pas en normal
		- Manque l'instantiation de nb dans get_spaces() ?
- Probleme affichage liens symboliques
- Mauvais espacement avant la size avec -l



Ordre des options :

-a	pour savoir si on utilise tous les fichiers
-t	pour classer par temps
-r	pour reverse le classement (donc need le -at avant)
-l	pour afficher cette liste classée avec toutes les infos necessaires
-R	pour lancer la récursive

-R :
Remplissage path_dir
affichage dossier courant
Tant qu'il y a des paths_dir on lance la récursive



Base :
- L'executable s'appelle ft_ls
- Faire un Makefile
- Fichier Auteur

- Réaliser les options -l, -R, -a, -r, -t et -1 .
	- Commencer par -R
	-a = qui commence par un '.'
	-l = list in long format
		- Ordre d'affichage : file mode, number of links, owner name, group name, number of bytes in the file,
			abbreviated month, day/hour/minutes file was last modified, and the path-name.
		- En plus, pour chaque dossier dont le contenu est affiché, on doit afficher le nombre total de blocks 512-bytes
			sur une ligne seule, juste avant les autres informations.
		- Si le fichier a des extended attributes, on affiche un '@' apres les permissions.
			"Extended attributes are name:value pairs associated permanently with files and directories".
			There are four extended attribute classes: security, system, trusted and user.
			Sinon si il a des extended security permissions, on met un '+' apres les permissions.
		- Si le fichier a plus de 6 mois, on affiche son annee au lieu de l'heure/min.
		- Si l'user ou le groupe ne sont pas connus, on affiche son ID en chiffre.
		- Truc avec les liens symboliques, pas trop compris.
		- Les mineurs majeurs (compliqué apparemment ls -l \dev)
	-R = recursive list subdirectories
	-r = reverse the order of the sort
	-t = sort par date de modification (+recent en 1er)
	- Pas besoin de gérer le formatage en plusieurs colonnes de la sortie quand l’option -l n’est pas passée.
	- Vous n’êtes pas obligés de gérer les ACL et les attributs étendus.

BONUS :
• Gestion des ACL et des attributs étendus
• Gestion des colonnes sans l’option -l. (man 4 tty)
• Gestion des options -u, -f, -g, -d, ...
• Gestion d’affichage en couleur (Similaire à l’option -G)
• Optimisation de votre code (Quel est le temps de réponse de votre ls sur un GROS ls -lR par exemple ?)


Fonctions autorisées :
◦ write
◦ opendir		//Ouvrir un dossier		DIR* rep; rep = opendir(rep);
◦ readdir		//Lire un dossier		dirent = readdir(rep);
◦ closedir		//Fermer le dossier		closedir(rep);

◦ stat			//Récupère l'état du fichier et remplit buf.
					int stat(const char *path, struct stat *buf);

◦ lstat			//identique a stat sauf pour les ln ou il point sur lui meme.
					int fstat(int fd, struct stat *buf);
◦ getpwuid
	   struct passwd *getpwuid (uid_t uid);
       La fonction getpwuid() renvoie un pointeur sur une  struc­
       ture  contenant  les  divers champs de l'enregistrement de
       /etc/passwd correspondant au à l'ID d'utilisateur uid.

       La structure passwd est définie dans <pwd.h> ainsi :

              struct passwd {
                char   *pw_name;   /* Nom d'utilisateur             */
                char   *pw_passwd; /* Mot de passe                  */
                uid_t   pw_uid;    /* ID de l'utilisateur           */
                gid_t   pw_gid;    /* ID du groupe de l'utilisateur */
                char   *pw_gecos;  /* Nom réel de l'utilisateur     */
                char   *pw_dir;    /* Répertoire de connexion       */
                char   *pw_shell;  /* Programme Shell de connexion  */
              };

◦ getgrgid
		struct group *getgrgid (gid_t gid);
       	La fonction getgrnid() renvoie un pointeur  sur  structure
       	contenant  l'enregistrement  issus  de  /etc/group pour le
      	 groupe correspondant a l'ID gid.

      	 La structure group est définie dans <grp.h> ainsi :

             	 struct group {
                   char   *gr_name;    /* Nom du groupe.          */
                   char   *gr_passwd;  /* Mot de passe du groupe. */
                   gid_t   gr_gid;     /* ID du groupe.           */
                   char  **gr_mem;     /* Membres du groupe.      */
              };

◦ listxattr
		Lister les noms des attributs étendus.
		ssize_t llistxattr (const char *chemin, char *liste, size_t taille);
		listxattr() récupère la liste des attributs étendus associé avec le chemin indiqué du système
		de fichier. La liste est l'ensemble des noms (terminés par NULL), l'un après l'autre. 
		Les noms des attributs étendus auxquels le processus appelant n'a pas accès 
		peuvent être omis dans la liste. La longueur de la liste de noms d'attributs est renvoyée.

◦ getxattr
		ssize_t getxattr (const char *chemin, const char *nom, void *valeur, size_t taille);
		getxattr() récupère la valeur de l'attribut étendu identifié par le nom et associé au chemin 
		donné dans le système de fichiers. La longueur de la valeur est renvoyée.
		Renvoi un nombre positif correspondant à la taille de la valeur de l'attribut étendu.

◦ time
		time_t time(time_t *t);
		time() renvoie l'heure actuelle sous forme du nombre de secondes écoulées depuis le 1er 
		janvier 1970 à 00h 00m 00s GMT, le début de l'Ère Unix.

◦ ctime
		char *ctime(const time_t *timep);
		La fonction ctime() convertit la date timep en une  chaîne de caractères.

◦ readlink
		ssize_t readlink(const char *path, char *buf, size_t bufsiz);
		Place le contenu du lien symbolique path dans le tampon buf dont la taille est bufsiz. 
		Il tronquera le contenu si le tampon est trop petit pour recevoir les données.  
		Renvoie le nombre de caractères placés dans le tampon, ou -1

◦ malloc
◦ free
◦ perror
◦ strerror
◦ exit
+ d'autres pour les bonus SI JUSTIFIED comme tcgetattr




rvievill [7:03 PM] 
Dans le cas du -l les lien symbolique sont considéré comme des fichiers du coup tu dois pas check le cible
Genre ton lien pointe sur un répertoire ba si tu check la cible se sera un répertoire et non un lien alors qu'avec le -l faut que ce soit un lien

----------------------------------------------------------------------------------------------------------------------------
############################################################################################################################
----------------------------------------------------------------------------------------------------------------------------

VOCABULAIRE & MAN & ETC
=======================

//Voici a quoi ressemble la struct dirent
struct dirent {
    ino_t          d_ino;       /* numéro d'inœud */
    off_t          d_off;       /* décalage jusqu'à la dirent suivante */
    unsigned short d_reclen;    /* longueur de cet enregistrement */
    unsigned char  d_type;      /* type du fichier */
    char           d_name[256]; /* nom du fichier */
};

==============================================================================================

//Les fonctions stat retournent une structure stat contenant les champs suivants :
struct stat {
    dev_t     st_dev;      /* ID du périphérique contenant le fichier */
    ino_t     st_ino;      /* Numéro inœud */
    mode_t    st_mode;     /* Protection */
    nlink_t   st_nlink;    /* Nb liens matériels */
    uid_t     st_uid;      /* UID propriétaire */
    gid_t     st_gid;      /* GID propriétaire */
    dev_t     st_rdev;     /* ID périphérique (si fichier spécial) */
    off_t     st_size;     /* Taille totale en octets */
    blksize_t st_blksize;  /* Taille de bloc pour E/S */
    blkcnt_t  st_blocks;   /* Nombre de blocs alloués */
    time_t    st_atime;    /* Heure dernier accès */
    time_t    st_mtime;    /* Heure dernière modification */
    time_t    st_ctime;    /* Heure dernier changement état */
};
S_ISREG(m)
un fichier ordinaire ?
S_ISDIR(m)
un répertoire ?
S_ISCHR(m)
un périphérique en mode caractère ?
S_ISBLK(m)
un périphérique en mode bloc ?
S_ISFIFO(m)
une FIFO (tube nommé) ?
S_ISLNK(m)
un lien symbolique ? (Pas dans POSIX.1-1996).
S_ISSOCK(m)
une socket ? (Pas dans POSIX.1-1996).

Les attributs suivants correspondent au champ st_mode :
S_IFMT	0170000	masque du type de fichier
S_IFSOCK	0140000	socket
S_IFLNK	0120000	lien symbolique = 'l'
S_IFREG	0100000	fichier ordinaire = '-'
S_IFBLK	0060000	périphérique blocs = 'b'
S_IFDIR	0040000	répertoire = 'r'
S_IFCHR	0020000	périphérique caractères = 'c'
S_IFIFO	0010000	fifo = 'p'
S_ISUID	0004000	bit set-UID
S_ISGID	0002000	bit set-GID (voir plus loin)
S_ISVTX	0001000	bit « sticky » (voir plus loin)
S_IRWXU	00700	lecture/écriture/exécution du propriétaire
S_IRUSR	00400	le propriétaire a le droit de lecture
S_IWUSR	00200	le propriétaire a le droit d'écriture
S_IXUSR	00100	le propriétaire a le droit d'exécution
S_IRWXG	00070	lecture/écriture/exécution du groupe
S_IRGRP	00040	le groupe a le droit de lecture
S_IWGRP	00020	le groupe a le droit d'écriture
S_IXGRP	00010	le groupe a le droit d'exécution
S_IRWXO	00007	lecture/écriture/exécution des autres
S_IROTH	00004	les autres ont le droit de lecture
S_IWOTH	00002	les autres ont le droit d'écriture
S_IXOTH	00001	les autres ont le droit d'exécution


----------------------------------------------------------------------------------------------------------------------------
############################################################################################################################
----------------------------------------------------------------------------------------------------------------------------

RECHERCHES ET LIENS
===================


-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------



-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------
############################################################################################################################
----------------------------------------------------------------------------------------------------------------------------

CONSEILS ET SLACK
=================

Les opti
-------------------------------------
-------------------------------------


-------------------------------------
-------------------------------------







----------------------------------------------------------------------------------------------------------------------------
############################################################################################################################
----------------------------------------------------------------------------------------------------------------------------

FROM VIDEOS
===========









----------------------------------------------------------------------------------------------------------------------------
############################################################################################################################
----------------------------------------------------------------------------------------------------------------------------

BOUTS DE CODE
=============

==========================================================================================
Lire le dossier courant et afficher les fichiers
==========================================================================================

	DIR *rep;
	rep = opendir(".");
 	while ((dirent = readdir(rep))) 
        printf("%s\n", dirent->d_name);

==========================================================================================



----------------------------------------------------------------------------------------------------------------------------
############################################################################################################################
----------------------------------------------------------------------------------------------------------------------------

ERREURS COMPILATION
===================


drwxr-xr-x    7 vmercadi  2016_paris    238 Aug  4 14:41 testdir
Aug 4 14:41
tmp = Fri Aug  4 14:41:16 2017



4-7(6)
19-5
4-12
















